----导入库
import asyncio

---	事件循环（3.7之前）
一个死循环，去检测并执行某些代码
-	生成或获取一个事件循环（3.7之前）
loop = asyncio.get_event_loop()
-	将任务放到任务列表（3.7之前）
loop.run_until_complete(任务)

-	协程函数
async def 函数名

-	协程对象
变量名 = 协程函数名
变量名就是协程对象

---	事件循环生成并执行
asyncio.run(协程对象)

-	await语句
await asyncio.sleep(2)
遇到io阻塞就切换事件
后可接语句和函数名

--	task对象
可异步的对象
-	将任务添加为task对象
asyncio.create_task()		# 3.7之后推荐
asyncio.ensure_future()		# 3.7之前
-	name参数
给任务命名

-	await asyncio.wait()
await asyncio.wait(task对象列表)
等待任务列表全部完成
await asyncio.wait（任务列表)
为每一个任务自动创建task对象

--	Future对象
task对象的基类，task对象内部await的结果的处理基于Future对象

---	concurrent.futures.Future对象
使用线程池、进程池实现异步操作时用到的对象

---	uvloop
提高事件循环的效率
在编写asyncio程序之前加上
import uvloop
asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

---	异步redis
在使用python代码操作redis时，链接/操作/断开都是网络IO
aioredis

---	异步mysql
同异步redis
aiomysql

